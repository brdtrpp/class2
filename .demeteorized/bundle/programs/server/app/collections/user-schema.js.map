{"version":3,"sources":["meteor://ðŸ’»app/collections/user-schema.js"],"names":[],"mappings":"wuC","file":"/collections/user-schema.js","sourcesContent":["Schema = {},\n\nSchema.UserProfile = new SimpleSchema({\n  createdAt: {\n    type: Date,\n    autoValue: function() {\n      if (this.isInsert) {\n        return new Date;\n      } else if (this.isUpsert) {\n        return {$setOnInsert: new Date};\n      } else {\n        this.unset();  // Prevent user from supplying their own value\n      }\n    },\n    autoform: {\n      omit: true\n    }\n  },\n  firstName: {\n      type: String,\n      optional: true,\n    },\n  lastName: {\n      type: String,\n      optional: true\n  },\n  birthday: {\n      type: Date,\n      optional: true,\n      autoform: {\n        afFieldInput: {\n          type: \"bootstrap-datepicker\"\n        }\n      }\n  },\n  gender: {\n      type: String,\n      allowedValues: ['Male', 'Female'],\n      optional: true\n  },\n  organization : {\n      type: String,\n      optional: true\n  },\n  website: {\n      type: String,\n      regEx: SimpleSchema.RegEx.Url,\n      optional: true\n  },\n  bio: {\n      type: String,\n      optional: true\n  },\n  homeAddress: {\n    type: AddressSchema,\n    optional: true,\n  },\n  businessAddress: {\n    type: AddressSchema,\n    optional: true,\n    autoform: {\n      omit: true\n    }\n  },\n\n  customerId: {\n    type: String,\n    autoValue: function() {\n      if (this.isInsert) {\n        var Stripe = StripeAPI(Meteor.settings.private.stripe.testSecretKey);\n        var stripeCustomersCreateSync = Meteor.wrapAsync(Stripe.customers.create,Stripe.customers);\n        var result = stripeCustomersCreateSync({\n          description: 'Attendee',\n        });\n        return result.id;\n      } else {\n        this.unset();  // Prevent user from supplying their own value\n      }\n    },\n    autoform: {\n      omit: true\n    }\n  },\n  accountId: {\n    type : String,\n    optional: true,\n    autoform: {\n      omit: true\n    }\n  },\n  cardId : {\n    type: String,\n    optional: true,\n    blackbox: true,\n    autoform: {\n      omit: true\n    }\n  },\n});\n\nSchema.User = new SimpleSchema({\n    username: {\n      type: String,\n      regEx: /^[a-z0-9A-Z_]{3,15}$/,\n      unique: true,\n      optional: true,\n    },\n    emails: {\n        type: Array,\n        optional: true\n    },\n    \"emails.$\": {\n        type: Object\n    },\n    \"emails.$.address\": {\n        type: String,\n        regEx: SimpleSchema.RegEx.Email\n    },\n    \"emails.$.verified\": {\n        type: Boolean\n    },\n    profile: {\n        type: Schema.UserProfile,\n        optional: true\n    },\n\n    services: {\n        type: Object,\n        optional: true,\n        blackbox: true\n    },\n\n    // Add `roles` to your schema if you use the meteor-roles package.\n    // Option 1: Object type\n    // If you specify that type as Object, you must also specify the\n    // `Roles.GLOBAL_GROUP` group whenever you add a user to a role.\n    // Example:\n    // Roles.addUsersToRoles(userId, [\"admin\"], Roles.GLOBAL_GROUP);\n    // You can't mix and match adding with and without a group since\n    // you will fail validation in some cases.\n    // roles: {\n    //     type: Object,\n    //     optional: true,\n    //     blackbox: true\n    // },\n    // // Option 2: [String] type\n    // // If you are sure you will never need to use role groups, then\n    // // you can specify [String] as the type\n    // roles: {\n    //     type: [String],\n    //     optional: true\n    // }\n});\n\nMeteor.users.attachSchema(Schema.User);"]}