{"version":3,"sources":["meteor://ðŸ’»app/collections/cal_event.js"],"names":[],"mappings":"yfile":"/collections/cal_event.js","sourcesContent":["CalEvent = new Mongo.Collection('calevent');\n\nCalEventIndex = new EasySearch.Index({\n  collection: CalEvent,\n  fields: ['title', 'description', 'start', 'zip'],\n  engine: new EasySearch.MongoDB()\n});\n\nRecurSchema = new SimpleSchema({\n  type: {\n    type: String,\n    label: \"Type of Class\",\n    allowedValues: ['false','lesson', 'course'],\n    autoform: {\n      type: \"select-radio\",\n      options: {\n        undefined: \"None Recurring\",\n        lesson: \"Lesson (individual classes with separate attendee list)\",\n        course: \"Course (a recurring class with the same attendees)\",\n      }\n    }\n  },\n  intervalNumber: {\n    type: Number,\n    label: \"Repeat this class every...\",\n  },\n  intervalType: {\n    type: String,\n    label: \"Interval\",\n    allowedValues: ['days', 'weeks', \"months\", \"years\"],\n    autoform: {\n      type: \"select-radio-inline\",\n      options: {\n        days: \"Days\",\n        weeks: \"Weeks\",\n        months: \"Months\",\n        years: \"Years\"\n      }\n    }\n  },\n  intervalStop: {\n    type: Number,\n    label: \"Stop after this many occurances.\",\n    max: 365\n  },\n});\n\nCalEvent.attachSchema(new SimpleSchema({\n  createdAt: {\n    type: Date,\n    autoValue: function() {\n      if (this.isInsert) {\n        return new Date;\n      } else if (this.isUpsert) {\n        return {$setOnInsert: new Date};\n      } else {\n        this.unset();  // Prevent user from supplying their own value\n      }\n    },\n    autoform: {\n      omit: true\n    },\n  },\n  title: {\n    type: String,\n    label: \"Title\",\n    max: 200,\n    defaultValue: \"New Class\",\n  },\n  start: {\n    type: String,\n    label: \"Start Date and Time\",\n    autoform: {\n      afFieldInput: {\n        type: \"bootstrap-datetimepicker\",\n      }\n    }\n  },\n  end: {\n    type: String,\n    label: \"End Date and Time\",\n    autoform: {\n      afFieldInput: {\n        type: \"bootstrap-datetimepicker\"\n      }\n    },\n  },\n\n  description: {\n    type: String,\n    optional: true,\n    label: \"Description\",\n    min: 10,\n    max: 5000,\n    defaultValue: \"Write class description here.\",\n  },\n  owner: {\n    type: String,\n    autoValue: function() {\n      return Meteor.userId();\n    },\n    autoform: {\n      omit: true\n    },\n  },\n  allDay: {\n    type: Boolean,\n    label: \"All Day Event\",\n    optional: true,\n  },\n  recur: {\n    type: RecurSchema,\n    label: \"Recurring Structure (optional)\",\n    optional: true,\n  },\n  price: {\n   type: Number,\n   label: \"Price in $ (leave blank if class is free)\",\n   optional: true,\n   min: 10,\n   max: 900000,\n   defaultValue: 25,\n  },\n\n  attendeeCount: {\n    type: Number,\n    label: \"Attendee Limit\",\n    optional: true,\n    min: 1,\n    defaultValue: 10,\n  },\n  street: {\n    type: String,\n    max: 100,\n    defaultValue: function() {\n      var user = Meteor.user();\n      return user.profile.businessAddress.street;\n    }\n  },\n  city: {\n    type: String,\n    max: 50,\n    defaultValue: function() {\n      return Meteor.user().profile.businessAddress.city;\n    },\n\n  },\n  state: {\n    type: String,\n    regEx: /^A[LKSZRAEP]|C[AOT]|D[EC]|F[LM]|G[AU]|HI|I[ADLN]|K[SY]|LA|M[ADEHINOPST]|N[CDEHJMVY]|O[HKR]|P[ARW]|RI|S[CD]|T[NX]|UT|V[AIT]|W[AIVY]$/,\n    defaultValue: function() {\n      return Meteor.user().profile.businessAddress.state;\n    }\n  },\n  zip: {\n    type: String,\n    regEx: /^[0-9]{5}$/,\n    defaultValue: function() {\n      return Meteor.user().profile.businessAddress.zip;\n    }\n  },\n  courseId: {\n    type: String,\n    optional: true,\n    autoform: {\n      omit: true\n    },\n  }\n}));\n"]}