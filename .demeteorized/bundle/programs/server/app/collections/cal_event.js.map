{"version":3,"sources":["meteor://ðŸ’»app/collections/cal_event.js"],"names":[],"mappings":"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","file":"/collections/cal_event.js","sourcesContent":["CalEvent = new Mongo.Collection('calevent');\n\nCalEventIndex = new EasySearch.Index({\n  collection: CalEvent,\n  fields: ['title', 'description', 'start', 'zip', 'owner', 'city', 'state', '_id'],\n  engine: new EasySearch.MongoDB()\n});\n\nRecurSchema = new SimpleSchema({\n  type: {\n    type: String,\n    label: \"Type of Class\",\n    allowedValues: ['false','lesson', 'course'],\n    autoform: {\n      type: \"select-radio\",\n      options: {\n        undefined: \"None Recurring\",\n        lesson: \"Lesson (individual classes with separate attendee list)\",\n        course: \"Course (a recurring class with the same attendees)\",\n      }\n    }\n  },\n  intervalNumber: {\n    type: Number,\n    label: \"Repeat this class every...\",\n  },\n  intervalType: {\n    type: String,\n    label: \"Interval\",\n    allowedValues: ['days', 'weeks', \"months\", \"years\"],\n    autoform: {\n      type: \"select-radio-inline\",\n      options: {\n        days: \"Days\",\n        weeks: \"Weeks\",\n        months: \"Months\",\n        years: \"Years\"\n      }\n    }\n  },\n  intervalStop: {\n    type: Number,\n    label: \"Stop after this many occurances.\",\n    max: 365\n  },\n});\n\nCalEvent.attachSchema(new SimpleSchema({\n  createdAt: {\n    type: Date,\n    autoValue: function() {\n      if (this.isInsert) {\n        return new Date;\n      } else if (this.isUpsert) {\n        return {$setOnInsert: new Date};\n      } else {\n        this.unset();  // Prevent user from supplying their own value\n      }\n    },\n    autoform: {\n      omit: true\n    },\n  },\n  title: {\n    type: String,\n    label: \"Title\",\n    max: 200,\n    defaultValue: \"New Class\",\n  },\n  start: {\n    type: String,\n    label: \"Start Date and Time\",\n    autoform: {\n      afFieldInput: {\n        type: \"bootstrap-datetimepicker\",\n      }\n    }\n  },\n  end: {\n    type: String,\n    label: \"End Date and Time\",\n    autoform: {\n      afFieldInput: {\n        type: \"bootstrap-datetimepicker\"\n      }\n    },\n  },\n\n  category: {\n    type: String,\n    allowedValues: [\n      'academic',\n      'beauty_style',\n      'computer',\n      'crafts_hobbies',\n      'culinary',\n      'health_wellness',\n      'language',\n      'music',\n      'performance',\n      'sports',\n      'fitness',\n      'arts',\n      'other'\n    ],\n    autoform: {\n      type: \"select\",\n      options: {\n        academic: \"Academics\",\n        beauty_style: \"Beauty & Style\",\n        computer: \"Computers & Technology\",\n        crafts_hobbies: \"Craft & Hobbies\",\n        culinary: \"Culinary\",\n        health_wellness: \"Health & Wellness\",\n        language: \"Language\",\n        music: \"Music\",\n        performance: \"Performaning Arts\",\n        sports: \"Sports & Athletics\",\n        fitness: \"Fitness\",\n        arts: \"Creative Arts\",\n        other: \"Other\"\n      }\n    },\n    optional: true\n  },\n\n  description: {\n    type: String,\n    optional: true,\n    label: \"Description\",\n    min: 10,\n    max: 5000,\n    defaultValue: \"Write class description here.\",\n  },\n  owner: {\n    type: String,\n    autoValue: function() {\n      return Meteor.userId();\n    },\n    autoform: {\n      omit: true\n    },\n  },\n  allDay: {\n    type: Boolean,\n    label: \"All Day Event\",\n    optional: true,\n  },\n  recur: {\n    type: RecurSchema,\n    label: \"Recurring Structure (optional)\",\n    optional: true,\n  },\n  price: {\n   type: Number,\n   label: \"Price in $ (leave blank if class is free)\",\n   optional: true,\n   min: 10,\n   max: 900000,\n   defaultValue: 25,\n  },\n\n  attendeeCount: {\n    type: Number,\n    label: \"Attendee Limit\",\n    optional: true,\n    min: 1,\n    defaultValue: 10,\n  },\n  street: {\n    type: String,\n    max: 100,\n    defaultValue: function() {\n      var user = Meteor.user();\n      return user.profile.businessAddress.street;\n    }\n  },\n  city: {\n    type: String,\n    max: 50,\n    defaultValue: function() {\n      return Meteor.user().profile.businessAddress.city;\n    },\n\n  },\n  state: {\n    type: String,\n    regEx: /^A[LKSZRAEP]|C[AOT]|D[EC]|F[LM]|G[AU]|HI|I[ADLN]|K[SY]|LA|M[ADEHINOPST]|N[CDEHJMVY]|O[HKR]|P[ARW]|RI|S[CD]|T[NX]|UT|V[AIT]|W[AIVY]$/,\n    defaultValue: function() {\n      return Meteor.user().profile.businessAddress.state;\n    }\n  },\n  zip: {\n    type: String,\n    regEx: /^[0-9]{5}$/,\n    defaultValue: function() {\n      return Meteor.user().profile.businessAddress.zip;\n    }\n  },\n  courseId: {\n    type: String,\n    optional: true,\n    autoform: {\n      omit: true\n    },\n  },\n}));\n"]}