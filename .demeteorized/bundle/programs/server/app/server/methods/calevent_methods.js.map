{"version":3,"sources":["meteor://ðŸ’»app/server/methods/calevent_methods.js"],"names":[],"mappings":"yfile":"/server/methods/calevent_methods.js","sourcesContent":["Meteor.methods({\n  removeCal: function(doc) {\n    //refund to antendees\n    console.log(doc);\n    if (moment(moment(doc.start).toISOString()).isBefore(moment())) {\n      console.log(Meteor.userId() + \" tried to delete event after current date\");\n    } else {\n      if (CalEvent.findOne({_id: doc._id}).owner === Meteor.userId()) {\n        Meteor.call('refundEvent', doc);\n        CalEvent.remove({_id: doc._id});\n      }\n    }\n  },\n  \n  removeCourse: function(doc) {\n    var course = CalEvent.find({courseId: doc.courseId}).fetch();\n    _.forEach(course, function(item) {\n      var doc = item;\n      Meteor.call(\"removeCal\", doc);\n    });\n  },\n  \n  edit: function(doc) {\n    console.log(\"editing \" + doc._id);\n  },\n  \n  recur:function(doc){\n    var startTime = moment(doc.start).format(\"hh:mm a [GMT] ZZ\");\n    var recur = moment(doc.start).recur().every(doc.recur.intervalNumber, doc.recur.intervalType);\n    var dates = recur.next(doc.recur.intervalStop, \"L\");\n    var dur = moment(doc.end).diff(moment(doc.start));\n    var courseId = Random.id();\n    // console.log(recur);\n    // console.log(dur);\n    Meteor.call('saveCalEvent', doc);\n\n    //Recurring individual events\n    if (doc.recur.type === \"lesson\") {\n      _.forEach(dates, function(item){\n        var newStart = moment(item + \" \" + startTime);\n        var newEnd = moment(newStart).add(dur, 'ms');\n        doc.start = moment(newStart).toISOString();\n        doc.end = moment(newEnd).toISOString();\n        // console.log(doc.start);\n        // console.log(doc.end);\n        Meteor.call('saveCalEvent', doc);\n      });\n    }\n\n    if (doc.recur.type === \"course\") {\n      _.forEach(dates, function(item){\n        doc.courseId = courseId;\n        var newStart = moment(item + \" \" + startTime);\n        var newEnd = moment(newStart).add(dur, 'ms');\n        doc.start = moment(newStart).toISOString();\n        doc.end = moment(newEnd).toISOString();\n        // console.log(doc);\n        Meteor.call('saveCalEvent', doc);\n      });\n    }\n  },\n\n  saveCalEvent:function(doc){\n    //check if user is signed in or if the start date of the event is before now\n    if (!this.userId || moment(moment(doc.start).toISOString()).isBefore(moment())) {\n      return null;\n    } else {\n      //save event and dates are saved into ISO format\n      return CalEvent.insert({\n        createdAt: doc.createdAt,\n        title: doc.title,\n        start: moment(doc.start).toISOString(),\n        end: moment(doc.end).toISOString(),\n        description: doc.description,\n        owner: doc.owner,\n        allDay: doc.allDay,\n        price: doc.price,\n        attendeeCount: doc.attendeeCount,\n        street: doc.street,\n        city: doc.city,\n        state: doc.state,\n        zip: doc.zip,\n        courseId: doc.courseId,\n      }); \n    }\n  },\n\n  resizeCalEvent:function(id, delta) {\n    if (!this.userId) {\n      return null;\n    } else {\n      var event = CalEvent.findOne({_id: id});\n      var add = moment(event.end).add({\n        years: delta._data.years,\n        months: delta._data.months,\n        days: delta._data.days,\n        hours: delta._data.hours,\n        minutes: delta._data.minutes,\n      });\n      var end = add._d;\n      CalEvent.update({_id: id}, {$set: {\n        end: moment(end).toISOString(),\n      }});\n    }\n  },\n\n  moveEvent:function(id, delta){\n    var event = CalEvent.findOne({_id: id});\n    var startAdd = moment(event.start).add({\n      years: delta._data.years,\n      months: delta._data.months,\n      days: delta._data.days,\n      hours: delta._data.hours,\n      minutes: delta._data.minutes,\n    });\n    var endAdd = moment(event.end).add({\n      years: delta._data.years,\n      months: delta._data.months,\n      days: delta._data.days,\n      hours: delta._data.hours,\n      minutes: delta._data.minutes,\n    });\n    var start = startAdd._d;\n    var end = endAdd._d;\n    CalEvent.update({_id: id}, {$set: {\n      start: moment(start).toISOString(),\n      end: moment(end).toISOString(),\n    }});\n  },\n});"]}