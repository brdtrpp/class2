{"version":3,"sources":["meteor://ðŸ’»app/server/methods/stripe_methods.js"],"names":[],"mappings":"yfile":"/server/methods/stripe_methods.js","sourcesContent":["Meteor.methods({\n  refundEvent: function(doc) {\n    var attendees = Attendee.find({eventId: doc._id});\n    _.forEach(attendees.fetch(), function(item){\n      var att = item;\n      Meteor.call('refundAttendee', doc, att);\n    });\n  },\n\n  refundAttendee: function (doc, att) {\n    \n    var stripeRefund = Meteor.wrapAsync(Stripe.refunds.create,Stripe.refunds);\n    stripeRefund({\n      charge: att.charge,\n      refund_application_fee: true,\n      reverse_transfer: true,\n    }, function(err, refund) {\n      if (refund) {\n        console.log(refund);\n        var doc = refund;\n        Meteor.call('refundAtt', doc, att);\n      }\n      if (err) {\n        console.log(err);\n      }\n    });\n  },\n\n  getAccount: function(aid) {\n    var stripeAccounts = Meteor.wrapAsync(Stripe.accounts.retrieve,Stripe.accounts);\n    stripeAccounts(aid, function(err, result) {\n      if (err) {\n        console.log(err);\n      }\n       if (result) {\n       console.log(result.id);\n        return result;\n       }\n\n    });\n\n  },\n\n  charge: function(event, att) {\n    //doc is the _id of the attendee\n    var user = Meteor.users.findOne({_id: Meteor.userId()});\n    var stripeCardCharge = Meteor.wrapAsync(Stripe.charges.create,Stripe.charges);\n    //end price is in cents and marked up 10%\n    var endPrice = event.price * 110;\n    var appfee = endPrice - ( event.price * 100 );\n   stripeCardCharge({\n        amount: endPrice,\n        currency: \"USD\",\n        customer: user.profile.customerId,\n        application_fee: appfee.toFixed(0),\n        description: event.title + \" \" + event.start,\n        destination: Meteor.user(event.owner).profile.accountId\n    }, function(err, charge) {\n        if (err && err.type === 'StripeCardError') {\n          console.log(err);\n        } else {\n          console.log(charge);\n          if (event.courseId != undefined) {\n            Meteor.call(\"addCourseAtt\", event, att, charge);\n          } else {\n            Meteor.call(\"addAtt\", event, att, charge);\n          }\n        }\n    });\n  },\n\n  createCard: function (stripeToken) {\n    var user = Meteor.users.findOne({_id: Meteor.userId()});\n    var stripeCardCreate = Meteor.wrapAsync(Stripe.customers.createSource,Stripe.customers);\n    var stripeCardDelete = Meteor.wrapAsync(Stripe.customers.deleteCard,Stripe.customers);\n    var create = stripeCardCreate(\n      user.profile.customerId, {\n        source: stripeToken\n        },\n        function (err, card) {\n          console.log(err, card);\n          Meteor.users.update({_id: Meteor.userId()}, {$set: {'profile.cardId': card.id}});\n      });\n    if (user.profile.cardId == undefined) {\n      create;\n    } else {\n      stripeCardDelete(user.profile.customerId, user.profile.cardId);\n      create;\n    }\n  },\n\n  createAccount: function(doc, stripeToken) {\n    var user = Meteor.users.findOne({_id: Meteor.userId()});\n    var stripeCreateAccount = Meteor.wrapAsync(Stripe.accounts.create,Stripe.accounts);\n    stripeCreateAccount({\n      managed: true,\n      country: 'US',\n      email: user.emails[0].address,\n      business_name: doc.businessName,\n      external_account: stripeToken,\n      legal_entity: {\n        first_name: doc.legalEntity.firstName,\n        last_name: doc.legalEntity.lastName,\n        type: doc.legalEntity.type,\n        dob: {\n          day: moment(doc.legalEntity.dob).get('date'),\n          month: moment(doc.legalEntity.dob).get('month'),\n          year: moment(doc.legalEntity.dob).get('year')\n        },\n      },\n      tos_acceptance: {\n        date: moment().unix(),\n        ip: this.connection.clientAddress,\n      },\n      transfer_schedule: {\n        delay_days: 7,\n        interval: 'weekly',\n        weekly_anchor: 'friday'},\n    }, function(err, account) {\n      if (err) {\n        console.log(err);\n      } else {\n        Meteor.users.update({_id: Meteor.userId()}, {\n          $set: {\n            'profile.accountId': account.id,\n            'profile.businessAddress.street': doc.address.street,\n            'profile.businessAddress.city': doc.address.city,\n            'profile.businessAddress.state': doc.address.state,\n            'profile.businessAddress.zip': doc.address.zip,\n          }\n        });\n      }\n    });\n  },\n\n});"]}