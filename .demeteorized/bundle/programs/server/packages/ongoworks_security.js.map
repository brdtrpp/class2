{"version":3,"sources":["meteor://ðŸ’»app/packages/ongoworks_security/packages/ongoworks_security.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wH","file":"/packages/ongoworks_security.js","sourcesContent":["(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                         //\n// packages/ongoworks_security/lib/server/security-util.js                                                 //\n//                                                                                                         //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                           //\n/* global _, rulesByCollection:true, addFuncForAll:true, ensureCreated:true, ensureDefaultAllow:true */    // 1\n                                                                                                           // 2\nrulesByCollection = {};                                                                                    // 3\n                                                                                                           // 4\nvar created = {                                                                                            // 5\n  allow: {                                                                                                 // 6\n    insert: {},                                                                                            // 7\n    update: {},                                                                                            // 8\n    remove: {},                                                                                            // 9\n    download: {} // for use with CollectionFS packages                                                     // 10\n  },                                                                                                       // 11\n  deny: {                                                                                                  // 12\n    insert: {},                                                                                            // 13\n    update: {},                                                                                            // 14\n    remove: {},                                                                                            // 15\n    download: {} // for use with CollectionFS packages                                                     // 16\n  }                                                                                                        // 17\n};                                                                                                         // 18\n                                                                                                           // 19\n/**                                                                                                        // 20\n * Adds the given function as an allow or deny function for all specified collections and types.           // 21\n * @param {Array(Mongo.Collection)} collections Array of Mongo.Collection instances                        // 22\n * @param {String}                  allowOrDeny \"allow\" or \"deny\"                                          // 23\n * @param {Array(String)}           types       Array of types (\"insert\", \"update\", \"remove\")              // 24\n * @param {Array(String)|null}      fetch       `fetch` property to use                                    // 25\n * @param {Function}                func        The function                                               // 26\n */                                                                                                        // 27\naddFuncForAll = function addFuncForAll(collections, allowOrDeny, types, fetch, func) {                     // 28\n  // We always disable transformation, but we transform for specific                                       // 29\n  // rules upon running our deny function if requested.                                                    // 30\n  var rules = {transform: null};                                                                           // 31\n  if (_.isArray(fetch)) {                                                                                  // 32\n    rules.fetch = fetch;                                                                                   // 33\n  }                                                                                                        // 34\n  _.each(types, function (t) {                                                                             // 35\n    rules[t] = func;                                                                                       // 36\n  });                                                                                                      // 37\n  _.each(collections, function (c) {                                                                       // 38\n    c[allowOrDeny](rules);                                                                                 // 39\n  });                                                                                                      // 40\n};                                                                                                         // 41\n                                                                                                           // 42\n/**                                                                                                        // 43\n * Creates the allow or deny function for the given collections if not already created. This ensures that this package only ever creates up to one allow and one deny per collection.\n * @param   {String}                  allowOrDeny \"allow\" or \"deny\"                                        // 45\n * @param   {Array(Mongo.Collection)} collections An array of collections                                  // 46\n * @param   {Array(String)}           types       An array of types (\"insert\", \"update\", \"remove\")         // 47\n * @param   {Array(String)|null}      fetch       `fetch` property to use                                  // 48\n * @param   {Function}                func        The function                                             // 49\n */                                                                                                        // 50\nensureCreated = function ensureCreated(allowOrDeny, collections, types, fetch, func) {                     // 51\n  _.each(types, function (t) {                                                                             // 52\n    collections = _.reject(collections, function (c) {                                                     // 53\n      return _.has(created[allowOrDeny][t], getCollectionName(c));                                         // 54\n    });                                                                                                    // 55\n    addFuncForAll(collections, allowOrDeny, [t], null, func);                                              // 56\n    // mark that we've defined function for collection-type combo                                          // 57\n    _.each(collections, function (c) {                                                                     // 58\n      created[allowOrDeny][t][getCollectionName(c)] = true;                                                // 59\n    });                                                                                                    // 60\n  });                                                                                                      // 61\n};                                                                                                         // 62\n                                                                                                           // 63\n/**                                                                                                        // 64\n * Sets up default allow functions for the collections and types.                                          // 65\n * @param   {Array(Mongo.Collection)} collections Array of Mongo.Collection instances                      // 66\n * @param   {Array(String)}           types       Array of types (\"insert\", \"update\", \"remove\")            // 67\n */                                                                                                        // 68\nensureDefaultAllow = function ensureDefaultAllow(collections, types) {                                     // 69\n  ensureCreated(\"allow\", collections, types, [], function () {                                             // 70\n    return true;                                                                                           // 71\n  });                                                                                                      // 72\n};                                                                                                         // 73\n                                                                                                           // 74\n/**                                                                                                        // 75\n * Return only those rules that apply to the given collection and operation type                           // 76\n */                                                                                                        // 77\ngetRulesForCollectionAndType = function getRulesForCollectionAndType(collectionName, type) {               // 78\n  var rules = rulesByCollection[collectionName] || [];                                                     // 79\n  return _.select(rules, function (rule) {                                                                 // 80\n    return _.contains(rule._types, type);                                                                  // 81\n  });                                                                                                      // 82\n};                                                                                                         // 83\n                                                                                                           // 84\ncomputeChangedFieldsFromModifier = function computeChangedFieldsFromModifier(modifier) {                   // 85\n  var fields = [];                                                                                         // 86\n  // This is the same logic Meteor's mongo package uses in                                                 // 87\n  // https://github.com/meteor/meteor/blob/devel/packages/mongo/collection.js                              // 88\n  _.each(modifier, function (params) {                                                                     // 89\n    _.each(_.keys(params), function (field) {                                                              // 90\n      // treat dotted fields as if they are replacing their                                                // 91\n      // top-level part                                                                                    // 92\n      if (field.indexOf('.') !== -1)                                                                       // 93\n        field = field.substring(0, field.indexOf('.'));                                                    // 94\n                                                                                                           // 95\n      // record the field we are trying to change                                                          // 96\n      if (!_.contains(fields, field))                                                                      // 97\n        fields.push(field);                                                                                // 98\n    });                                                                                                    // 99\n  });                                                                                                      // 100\n  return fields;                                                                                           // 101\n};                                                                                                         // 102\n                                                                                                           // 103\ngetCollectionName = function getCollectionName(collection) {                                               // 104\n  // CollectionFS has underlying collection on `files` property                                            // 105\n  return collection._name || (collection.files && collection.files._name);                                 // 106\n};                                                                                                         // 107\n                                                                                                           // 108\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                         //\n// packages/ongoworks_security/lib/server/security-deny.js                                                 //\n//                                                                                                         //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                           //\n/*                                                                                                         // 1\n * A single deny function runs all the deny functions registered by this package, allowing us to have      // 2\n * an OR relationship among multiple security rule chains.                                                 // 3\n */                                                                                                        // 4\n                                                                                                           // 5\nallRulesPass = function allRulesPass(collection, type, args) {                                             // 6\n  // select only those rules that apply to this operation type                                             // 7\n  var rules = getRulesForCollectionAndType(getCollectionName(collection), type);                           // 8\n                                                                                                           // 9\n  // Loop through all defined rules for this collection. There is an OR relationship among                 // 10\n  // all rules for the collection, so if any do NOT return true, we allow.                                 // 11\n  return !_.every(rules, function (rule) {                                                                 // 12\n    return rule.deny(type, collection, args);                                                              // 13\n  });                                                                                                      // 14\n};                                                                                                         // 15\n                                                                                                           // 16\nensureSecureDeny = function ensureSecureDeny(collections, types) {                                         // 17\n  _.each(types, function (t) {                                                                             // 18\n    _.each(collections, function (collection) {                                                            // 19\n      ensureCreated(\"deny\", [collection], [t], null, function () {                                         // 20\n        return !allRulesPass(collection, t, _.toArray(arguments));                                         // 21\n      });                                                                                                  // 22\n    });                                                                                                    // 23\n  });                                                                                                      // 24\n};                                                                                                         // 25\n                                                                                                           // 26\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                         //\n// packages/ongoworks_security/lib/server/security-api.js                                                  //\n//                                                                                                         //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                           //\n// The `Security` object is exported and provides the package API                                          // 1\nSecurity = {                                                                                               // 2\n  // Putting these on the exported object allows package users to override if necessary                    // 3\n  errorMessages: {                                                                                         // 4\n    multipleCan: 'You may not combine more than one insert, update, or remove on a Security.can chain',    // 5\n    notAllowed: 'Action not allowed',                                                                      // 6\n    requiresDeny: 'Security.defineMethod requires a \"deny\" function',                                      // 7\n    collectionsArg: 'The collections argument must be a Mongo.Collection instance or an array of them',    // 8\n    noCollectionOrType: 'At a minimum, you must call permit and collections methods for a security rule.',\n    updateArgs: 'The update method for Security.can requires two arguments, id and modifier'               // 10\n  },                                                                                                       // 11\n  Rule: function SecurityRuleConstructor(types) {                                                          // 12\n    var self = this;                                                                                       // 13\n                                                                                                           // 14\n    if (!_.isArray(types)) {                                                                               // 15\n      types = [types];                                                                                     // 16\n    }                                                                                                      // 17\n    self._types = types;                                                                                   // 18\n    self._restrictions = [];                                                                               // 19\n  },                                                                                                       // 20\n  // the starting point of the chain                                                                       // 21\n  permit: function permit(types) {                                                                         // 22\n    return new Security.Rule(types);                                                                       // 23\n  },                                                                                                       // 24\n  Check: function SecurityCheckConstructor(userId) {                                                       // 25\n    this.userId = userId || null;                                                                          // 26\n  },                                                                                                       // 27\n  can: function can(userId) {                                                                              // 28\n    return new Security.Check(userId);                                                                     // 29\n  },                                                                                                       // 30\n  defineMethod: function securityDefineMethod(name, definition) {                                          // 31\n    // Check whether a rule with the given name already exists; can't overwrite                            // 32\n    if (Security.Rule.prototype[name]) {                                                                   // 33\n      throw new Error('A security method with the name \"' + name + '\" has already been defined');          // 34\n    }                                                                                                      // 35\n    // Make sure the definition argument is an object that has a `deny` property                           // 36\n    if (!definition || !definition.deny) {                                                                 // 37\n      throw new Error(Security.errorMessages.requiresDeny);                                                // 38\n    }                                                                                                      // 39\n    // Wrap transform, if provided                                                                         // 40\n    if (definition.transform) {                                                                            // 41\n      definition.transform = LocalCollection.wrapTransform(definition.transform);                          // 42\n    }                                                                                                      // 43\n    Security.Rule.prototype[name] = function (arg) {                                                       // 44\n      var self = this;                                                                                     // 45\n      self._restrictions.push({                                                                            // 46\n        definition: definition,                                                                            // 47\n        arg: arg                                                                                           // 48\n      });                                                                                                  // 49\n      return self;                                                                                         // 50\n    };                                                                                                     // 51\n  }                                                                                                        // 52\n};                                                                                                         // 53\n                                                                                                           // 54\n// Security.Rule prototypes                                                                                // 55\nSecurity.Rule.prototype.collections = function (collections) {                                             // 56\n  var self = this;                                                                                         // 57\n  // Make sure the `collections` argument is either a `Mongo.Collection` instance or                       // 58\n  // an array of them. If it's a single collection, convert it to a one-item array.                        // 59\n  if (!_.isArray(collections)) collections = [collections];                                                // 60\n                                                                                                           // 61\n  // Keep list keyed by collection name                                                                    // 62\n  _.each(collections, function (collection) {                                                              // 63\n    if (!(collection instanceof Mongo.Collection) &&                                                       // 64\n        // CollectionFS has underlying collection on `files` property                                      // 65\n       !(collection.files instanceof Mongo.Collection)) {                                                  // 66\n      throw new Error(Security.errorMessages.collectionsArg);                                              // 67\n    }                                                                                                      // 68\n    // CollectionFS has underlying collection on `files` property                                          // 69\n    var n = getCollectionName(collection);                                                                 // 70\n    rulesByCollection[n] = rulesByCollection[n] || [];                                                     // 71\n    rulesByCollection[n].push(self);                                                                       // 72\n  });                                                                                                      // 73\n                                                                                                           // 74\n  self._collections = collections;                                                                         // 75\n                                                                                                           // 76\n  return self;                                                                                             // 77\n};                                                                                                         // 78\n                                                                                                           // 79\nSecurity.Rule.prototype.apply = function () {                                                              // 80\n  var self = this;                                                                                         // 81\n                                                                                                           // 82\n  if (!self._collections || !self._types) {                                                                // 83\n    throw new Error(Security.errorMessages.noCollectionOrType);                                            // 84\n  }                                                                                                        // 85\n                                                                                                           // 86\n  // If we haven't yet done so, set up a default, permissive `allow` function for all of                   // 87\n  // the given collections and types. We control all security through `deny` functions only, but           // 88\n  // there must first be at least one `allow` function for each collection or all writes                   // 89\n  // will be denied.                                                                                       // 90\n  ensureDefaultAllow(self._collections, self._types);                                                      // 91\n                                                                                                           // 92\n  // We need a combined `fetch` array. The `fetch` is optional and can be either an array                  // 93\n  // or a function that takes the argument passed to the restriction method and returns an array.          // 94\n  // TODO for now we can't set fetch accurately; maybe need to adjust API so that we \"apply\" only          // 95\n  // after we've defined all rules                                                                         // 96\n  //var fetch = [];                                                                                        // 97\n  //_.each(self._restrictions, function (restriction) {                                                    // 98\n  //  if (_.isArray(restriction.definition.fetch)) {                                                       // 99\n  //    fetch = fetch.concat(restriction.definition.fetch);                                                // 100\n  //  } else if (typeof restriction.definition.fetch === \"function\") {                                     // 101\n  //    fetch = fetch.concat(restriction.definition.fetch(restriction.arg));                               // 102\n  //  }                                                                                                    // 103\n  //});                                                                                                    // 104\n                                                                                                           // 105\n  ensureSecureDeny(self._collections, self._types);                                                        // 106\n                                                                                                           // 107\n};                                                                                                         // 108\n                                                                                                           // 109\nSecurity.Rule.prototype.deny = function (type, collection, args) {                                         // 110\n  var self = this;                                                                                         // 111\n  // Loop through all defined restrictions. Restrictions are additive for this chained                     // 112\n  // rule, so if any deny function returns true, this function should return true.                         // 113\n  return _.any(self._restrictions, function (restriction) {                                                // 114\n    var doc, transform = restriction.definition.transform;                                                 // 115\n                                                                                                           // 116\n    // If transform is a function, apply that                                                              // 117\n    if (typeof transform === 'function') {                                                                 // 118\n      if (type === 'insert') {                                                                             // 119\n        doc = EJSON.clone(args[1]);                                                                        // 120\n        // The wrapped transform requires an _id, but we                                                   // 121\n        // don't have access to the generatedId from Meteor API,                                           // 122\n        // so we'll fudge one and then remove it.                                                          // 123\n        doc._id = Random.id();                                                                             // 124\n      } else {                                                                                             // 125\n        doc = args[1];                                                                                     // 126\n      }                                                                                                    // 127\n      args[1] = transform(doc);                                                                            // 128\n      if (type === 'insert') {                                                                             // 129\n        delete args[1]._id;                                                                                // 130\n      }                                                                                                    // 131\n    }                                                                                                      // 132\n                                                                                                           // 133\n    // If not transform: null, apply the collection transform                                              // 134\n    else if (transform !== null && typeof collection._transform === 'function') {                          // 135\n      if (type === 'insert') {                                                                             // 136\n        doc = EJSON.clone(args[1]);                                                                        // 137\n        // The wrapped transform requires an _id, but we                                                   // 138\n        // don't have access to the generatedId from Meteor API,                                           // 139\n        // so we'll fudge one and then remove it.                                                          // 140\n        doc._id = Random.id();                                                                             // 141\n      } else {                                                                                             // 142\n        doc = args[1];                                                                                     // 143\n      }                                                                                                    // 144\n      args[1] = collection._transform(doc);                                                                // 145\n      if (type === 'insert') {                                                                             // 146\n        delete args[1]._id;                                                                                // 147\n      }                                                                                                    // 148\n    }                                                                                                      // 149\n                                                                                                           // 150\n    return restriction.definition.deny.apply(this, [type, restriction.arg].concat(args));                  // 151\n  });                                                                                                      // 152\n};                                                                                                         // 153\n                                                                                                           // 154\nMongo.Collection.prototype.permit = function (types) {                                                     // 155\n  return Security.permit(types).collections(this);                                                         // 156\n};                                                                                                         // 157\n                                                                                                           // 158\n// Security.Check prototypes                                                                               // 159\nSecurity.Check.prototype.for = function (collection) {                                                     // 160\n  var self = this;                                                                                         // 161\n  self.collection = collection;                                                                            // 162\n  return self;                                                                                             // 163\n};                                                                                                         // 164\n                                                                                                           // 165\n['insert', 'update', 'remove'].forEach(function (type) {                                                   // 166\n  Security.Check.prototype[type] = function () {                                                           // 167\n    var self = this;                                                                                       // 168\n    if (self.type) throw new Error(Security.errorMessages.multipleCan);                                    // 169\n    self.type = type;                                                                                      // 170\n    self.args = _.toArray(arguments);                                                                      // 171\n    // Compute and add fields argument for update type                                                     // 172\n    if (type === 'update') {                                                                               // 173\n      if (self.args.length !== 2) throw new Error(Security.errorMessages.updateArgs);                      // 174\n      self.args = [                                                                                        // 175\n        self.args[0],                                                                                      // 176\n        computeChangedFieldsFromModifier(self.args[1]),                                                    // 177\n        self.args[1]                                                                                       // 178\n      ];                                                                                                   // 179\n    }                                                                                                      // 180\n    return self;                                                                                           // 181\n  };                                                                                                       // 182\n});                                                                                                        // 183\n                                                                                                           // 184\n// Security.can(userId).insert(doc).for(MyCollection).check()                                              // 185\n// Security.can(userId).update(id, modifier).for(MyCollection).check()                                     // 186\n// Security.can(userId).remove(id).for(MyCollection).check()                                               // 187\nSecurity.Check.prototype.check = function () {                                                             // 188\n  var self = this;                                                                                         // 189\n  return allRulesPass(self.collection, self.type, [self.userId].concat(self.args));                        // 190\n};                                                                                                         // 191\n                                                                                                           // 192\n// Security.can(userId).insert(doc).for(MyCollection).throw()                                              // 193\n// Security.can(userId).update(id, modifier).for(MyCollection).throw()                                     // 194\n// Security.can(userId).remove(id).for(MyCollection).throw()                                               // 195\nSecurity.Check.prototype.throw = function () {                                                             // 196\n  if (!this.check()) throw new Meteor.Error('access-denied', Security.errorMessages.notAllowed);           // 197\n};                                                                                                         // 198\n                                                                                                           // 199\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                         //\n// packages/ongoworks_security/lib/security-rules.js                                                       //\n//                                                                                                         //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                           //\n/*                                                                                                         // 1\n * This file defines built-in restriction methods                                                          // 2\n */                                                                                                        // 3\n                                                                                                           // 4\n/*                                                                                                         // 5\n * No one                                                                                                  // 6\n */                                                                                                        // 7\n                                                                                                           // 8\nSecurity.defineMethod(\"never\", {                                                                           // 9\n  fetch: [],                                                                                               // 10\n  transform: null,                                                                                         // 11\n  deny: function () {                                                                                      // 12\n    return true;                                                                                           // 13\n  }                                                                                                        // 14\n});                                                                                                        // 15\n                                                                                                           // 16\n/*                                                                                                         // 17\n * Logged In                                                                                               // 18\n */                                                                                                        // 19\n                                                                                                           // 20\nSecurity.defineMethod(\"ifLoggedIn\", {                                                                      // 21\n  fetch: [],                                                                                               // 22\n  transform: null,                                                                                         // 23\n  deny: function (type, arg, userId) {                                                                     // 24\n    return !userId;                                                                                        // 25\n  }                                                                                                        // 26\n});                                                                                                        // 27\n                                                                                                           // 28\n/*                                                                                                         // 29\n * Specific User ID                                                                                        // 30\n */                                                                                                        // 31\n                                                                                                           // 32\nSecurity.defineMethod(\"ifHasUserId\", {                                                                     // 33\n  fetch: [],                                                                                               // 34\n  transform: null,                                                                                         // 35\n  deny: function (type, arg, userId) {                                                                     // 36\n    return userId !== arg;                                                                                 // 37\n  }                                                                                                        // 38\n});                                                                                                        // 39\n                                                                                                           // 40\n/*                                                                                                         // 41\n * Specific Roles                                                                                          // 42\n */                                                                                                        // 43\n                                                                                                           // 44\n/*                                                                                                         // 45\n * alanning:roles support                                                                                  // 46\n */                                                                                                        // 47\nif (Package && Package[\"alanning:roles\"]) {                                                                // 48\n                                                                                                           // 49\n  var Roles = Package[\"alanning:roles\"].Roles;                                                             // 50\n                                                                                                           // 51\n  Security.defineMethod(\"ifHasRole\", {                                                                     // 52\n    fetch: [],                                                                                             // 53\n    transform: null,                                                                                       // 54\n    deny: function (type, arg, userId) {                                                                   // 55\n      if (!arg) {                                                                                          // 56\n        throw new Error('ifHasRole security rule method requires an argument');                            // 57\n      }                                                                                                    // 58\n      if (arg.role) {                                                                                      // 59\n        return !Roles.userIsInRole(userId, arg.role, arg.group);                                           // 60\n      } else {                                                                                             // 61\n        return !Roles.userIsInRole(userId, arg);                                                           // 62\n      }                                                                                                    // 63\n    }                                                                                                      // 64\n  });                                                                                                      // 65\n                                                                                                           // 66\n}                                                                                                          // 67\n                                                                                                           // 68\n/*                                                                                                         // 69\n * nicolaslopezj:roles support                                                                             // 70\n * Note: doesn't support groups                                                                            // 71\n */                                                                                                        // 72\nif (Package && Package[\"nicolaslopezj:roles\"]) {                                                           // 73\n                                                                                                           // 74\n  var Roles = Package[\"nicolaslopezj:roles\"].Roles;                                                        // 75\n                                                                                                           // 76\n  Security.defineMethod(\"ifHasRole\", {                                                                     // 77\n    fetch: [],                                                                                             // 78\n    transform: null,                                                                                       // 79\n    deny: function (type, arg, userId) {                                                                   // 80\n      if (!arg) {                                                                                          // 81\n        throw new Error('ifHasRole security rule method requires an argument');                            // 82\n      }                                                                                                    // 83\n      return !Roles.userHasRole(userId, arg);                                                              // 84\n    }                                                                                                      // 85\n  });                                                                                                      // 86\n                                                                                                           // 87\n}                                                                                                          // 88\n                                                                                                           // 89\n/*                                                                                                         // 90\n * Specific Properties                                                                                     // 91\n */                                                                                                        // 92\n                                                                                                           // 93\nSecurity.defineMethod(\"onlyProps\", {                                                                       // 94\n  fetch: [],                                                                                               // 95\n  transform: null,                                                                                         // 96\n  deny: function (type, arg, userId, doc, fieldNames) {                                                    // 97\n    if (!_.isArray(arg)) {                                                                                 // 98\n      arg = [arg];                                                                                         // 99\n    }                                                                                                      // 100\n                                                                                                           // 101\n    fieldNames = fieldNames || _.keys(doc);                                                                // 102\n                                                                                                           // 103\n    return !_.every(fieldNames, function (fieldName) {                                                     // 104\n      return _.contains(arg, fieldName);                                                                   // 105\n    });                                                                                                    // 106\n  }                                                                                                        // 107\n});                                                                                                        // 108\n                                                                                                           // 109\nSecurity.defineMethod(\"exceptProps\", {                                                                     // 110\n  fetch: [],                                                                                               // 111\n  transform: null,                                                                                         // 112\n  deny: function (type, arg, userId, doc, fieldNames) {                                                    // 113\n    if (!_.isArray(arg)) {                                                                                 // 114\n      arg = [arg];                                                                                         // 115\n    }                                                                                                      // 116\n                                                                                                           // 117\n    fieldNames = fieldNames || _.keys(doc);                                                                // 118\n                                                                                                           // 119\n    return _.any(fieldNames, function (fieldName) {                                                        // 120\n      return _.contains(arg, fieldName);                                                                   // 121\n    });                                                                                                    // 122\n  }                                                                                                        // 123\n});                                                                                                        // 124\n                                                                                                           // 125\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n"]}