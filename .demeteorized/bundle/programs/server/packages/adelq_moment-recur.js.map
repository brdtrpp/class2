{"version":3,"sources":["meteor://ðŸ’»app/packages/adelq_moment-recur/packages/adelq_moment-recur.js"],"names":[],"mappingsfile":"/packages/adelq_moment-recur.js","sourcesContent":["(function () {\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                               //\n// packages/adelq:moment-recur/lib/moment-recur/moment-recur.js                                                  //\n//                                                                                                               //\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                 //\n(function (root, factory) {                                                                                      // 1\n    if (typeof exports === 'object') {                                                                           // 2\n        module.exports = factory(require('moment'));                                                             // 3\n    } else if (typeof define === 'function' && define.amd) {                                                     // 4\n        define('moment-recur', ['moment'], factory);                                                             // 5\n    } else {                                                                                                     // 6\n        root.moment = factory(root.moment);                                                                      // 7\n    }                                                                                                            // 8\n}(this, function (moment) {                                                                                      // 9\n    var hasModule;                                                                                               // 10\n                                                                                                                 // 11\n    hasModule = (typeof module !== \"undefined\" && module !== null) && (module.exports != null);                  // 12\n                                                                                                                 // 13\n    if (typeof moment === 'undefined') {                                                                         // 14\n      throw Error(\"Can't find moment\");                                                                          // 15\n    }                                                                                                            // 16\n                                                                                                                 // 17\n    // Interval object for creating and matching interval-based rules                                            // 18\n    var Interval = (function() {                                                                                 // 19\n        function createInterval(units, measure) {                                                                // 20\n            // Make sure all of the units are integers greater than 0.                                           // 21\n            for (var unit in units) {                                                                            // 22\n                if (units.hasOwnProperty(unit)) {                                                                // 23\n                    if ( parseInt(unit, 10) <= 0 ) {                                                             // 24\n                        throw Error('Intervals must be greater than zero');                                      // 25\n                    }                                                                                            // 26\n                }                                                                                                // 27\n            }                                                                                                    // 28\n                                                                                                                 // 29\n            return {                                                                                             // 30\n                measure: measure.toLowerCase(),                                                                  // 31\n                units: units                                                                                     // 32\n            };                                                                                                   // 33\n        }                                                                                                        // 34\n                                                                                                                 // 35\n        function matchInterval(type, units, start, date) {                                                       // 36\n            // Get the difference between the start date and the provded date,                                   // 37\n            // using the required measure based on the type of rule                                              // 38\n            var diff = start.diff(date, type, true);                                                             // 39\n                                                                                                                 // 40\n            // Check to see if any of the units provided match the date                                          // 41\n            for (var unit in units) {                                                                            // 42\n                if (units.hasOwnProperty(unit)) {                                                                // 43\n                    unit = parseInt(unit, 10);                                                                   // 44\n                                                                                                                 // 45\n                    // If the units devide evenly into the difference, we have a match                           // 46\n                    if ((diff % unit) === 0) {                                                                   // 47\n                        return true;                                                                             // 48\n                    }                                                                                            // 49\n                }                                                                                                // 50\n            }                                                                                                    // 51\n                                                                                                                 // 52\n            return false;                                                                                        // 53\n        }                                                                                                        // 54\n                                                                                                                 // 55\n        return {                                                                                                 // 56\n          create: createInterval,                                                                                // 57\n          match: matchInterval                                                                                   // 58\n        };                                                                                                       // 59\n    })();                                                                                                        // 60\n                                                                                                                 // 61\n    // Calendar object for creating and matching calendar-based rules                                            // 62\n    var Calendar = (function (){                                                                                 // 63\n        // Dictionary of unit types based on measures                                                            // 64\n        var unitTypes = {                                                                                        // 65\n            \"daysOfMonth\": \"date\",                                                                               // 66\n            \"daysOfWeek\": \"day\",                                                                                 // 67\n            \"weeksOfMonth\": \"monthWeek\",                                                                         // 68\n            \"weeksOfYear\": \"weeks\",                                                                              // 69\n            \"monthsOfYear\": \"months\"                                                                             // 70\n        };                                                                                                       // 71\n                                                                                                                 // 72\n        // Dictionary of ranges based on measures                                                                // 73\n        var ranges = {                                                                                           // 74\n            \"daysOfMonth\"  : { low: 1, high: 31 },                                                               // 75\n            \"daysOfWeek\"   : { low: 0, high: 6 },                                                                // 76\n            \"weeksOfMonth\" : { low: 0, high: 4 },                                                                // 77\n            \"weeksOfYear\"  : { low: 0, high: 52 },                                                               // 78\n            \"monthsOfYear\" : { low: 0, high: 11 }                                                                // 79\n        };                                                                                                       // 80\n                                                                                                                 // 81\n        // Private function for cehcking the range of calendar values                                            // 82\n        function checkRange(low, high, list) {                                                                   // 83\n            list.forEach(function(v) {                                                                           // 84\n                if ( v < low || v > high ) {                                                                     // 85\n                    throw Error('Value should be in range ' + low + ' to ' + high);                              // 86\n                }                                                                                                // 87\n            });                                                                                                  // 88\n        }                                                                                                        // 89\n                                                                                                                 // 90\n        // Private function to convert day and month names to numbers                                            // 91\n        function namesToNumbers(list, nameType) {                                                                // 92\n            var unit, unitInt, unitNum;                                                                          // 93\n            var newList = {};                                                                                    // 94\n                                                                                                                 // 95\n            for(unit in list) {                                                                                  // 96\n                if (list.hasOwnProperty(unit)) {                                                                 // 97\n                    unitInt = parseInt(unit, 10);                                                                // 98\n                                                                                                                 // 99\n                    if (isNaN(unitInt)) {                                                                        // 100\n                        unitInt = unit;                                                                          // 101\n                    }                                                                                            // 102\n                                                                                                                 // 103\n                    unitNum = moment().set(nameType, unitInt).get(nameType);                                     // 104\n                    newList[unitNum] = list[unit];                                                               // 105\n                }                                                                                                // 106\n            }                                                                                                    // 107\n                                                                                                                 // 108\n            return newList;                                                                                      // 109\n        }                                                                                                        // 110\n                                                                                                                 // 111\n        function createCalendarRule(list, measure) {                                                             // 112\n            var keys = [];                                                                                       // 113\n                                                                                                                 // 114\n            // Convert day/month names to numbers, if needed                                                     // 115\n            if (measure === \"daysOfWeek\") {                                                                      // 116\n                list = namesToNumbers(list, \"days\");                                                             // 117\n            }                                                                                                    // 118\n                                                                                                                 // 119\n            if (measure === \"monthsOfYear\") {                                                                    // 120\n                list = namesToNumbers(list, \"months\");                                                           // 121\n            }                                                                                                    // 122\n                                                                                                                 // 123\n            for (var key in list) if (hasOwnProperty.call(list, key)) keys.push(key);                            // 124\n                                                                                                                 // 125\n            // Make sure the listed units are in the measure's range                                             // 126\n            checkRange( ranges[measure].low,                                                                     // 127\n                        ranges[measure].high,                                                                    // 128\n                        keys );                                                                                  // 129\n                                                                                                                 // 130\n            return {                                                                                             // 131\n                measure: measure,                                                                                // 132\n                units: list                                                                                      // 133\n            };                                                                                                   // 134\n        }                                                                                                        // 135\n                                                                                                                 // 136\n        function matchCalendarRule(measure, list, date) {                                                        // 137\n            // Get the unit type (i.e. date, day, week, monthWeek, weeks, months)                                // 138\n            var unitType = unitTypes[measure];                                                                   // 139\n                                                                                                                 // 140\n            // Get the unit based on the required measure of the date                                            // 141\n            var unit = date[unitType]();                                                                         // 142\n                                                                                                                 // 143\n            // If the unit is in our list, return true, else return false                                        // 144\n            if ( list[unit] ) {                                                                                  // 145\n                return true;                                                                                     // 146\n            }                                                                                                    // 147\n                                                                                                                 // 148\n            return false;                                                                                        // 149\n        }                                                                                                        // 150\n                                                                                                                 // 151\n        return {                                                                                                 // 152\n            create: createCalendarRule,                                                                          // 153\n            match: matchCalendarRule                                                                             // 154\n        };                                                                                                       // 155\n    })();                                                                                                        // 156\n                                                                                                                 // 157\n    // The main Recur object to provide an interface for settings, rules, and matching                           // 158\n    var Recur = (function() {                                                                                    // 159\n                                                                                                                 // 160\n        // A dictionary used to match rule measures to rule types                                                // 161\n        var ruleTypes = {                                                                                        // 162\n            \"days\": \"interval\",                                                                                  // 163\n            \"weeks\": \"interval\",                                                                                 // 164\n            \"months\": \"interval\",                                                                                // 165\n            \"years\": \"interval\",                                                                                 // 166\n            \"daysOfWeek\": \"calendar\",                                                                            // 167\n            \"daysOfMonth\": \"calendar\",                                                                           // 168\n            \"weeksOfMonth\": \"calendar\",                                                                          // 169\n            \"weeksOfYear\": \"calendar\",                                                                           // 170\n            \"monthsOfYear\": \"calendar\"                                                                           // 171\n        };                                                                                                       // 172\n                                                                                                                 // 173\n        // a dictionary of plural and singular measures                                                          // 174\n        var measures = {                                                                                         // 175\n            \"days\": \"day\",                                                                                       // 176\n            \"weeks\": \"week\",                                                                                     // 177\n            \"months\": \"month\",                                                                                   // 178\n            \"years\": \"year\",                                                                                     // 179\n            \"daysOfWeek\": \"dayOfWeek\",                                                                           // 180\n            \"daysOfMonth\": \"dayOfMonth\",                                                                         // 181\n            \"weeksOfMonth\": \"weekOfMonth\",                                                                       // 182\n            \"weeksOfYear\": \"weekOfYear\",                                                                         // 183\n            \"monthsOfYear\": \"monthOfYear\"                                                                        // 184\n        };                                                                                                       // 185\n                                                                                                                 // 186\n                                                                                                                 // 187\n        /////////////////////////////////                                                                        // 188\n        // Private Methods             //                                                                        // 189\n        // Must be called with .call() //                                                                        // 190\n        /////////////////////////////////                                                                        // 191\n                                                                                                                 // 192\n        // Private method that tries to set a rule.                                                              // 193\n        function trigger() {                                                                                     // 194\n            var rule;                                                                                            // 195\n            var ruleType = ruleTypes[this.measure];                                                              // 196\n                                                                                                                 // 197\n            if (!(this instanceof Recur)) {                                                                      // 198\n                throw Error(\"Private method trigger() was called directly or not called as instance of Recur!\"); // 199\n            }                                                                                                    // 200\n                                                                                                                 // 201\n            // Make sure units and measure is defined and not null                                               // 202\n            if ((typeof this.units === \"undefined\" || this.units === null) || !this.measure) {                   // 203\n                return this;                                                                                     // 204\n            }                                                                                                    // 205\n                                                                                                                 // 206\n            // Error if we don't have a valid ruleType                                                           // 207\n            if (ruleType !== \"calendar\" && ruleType !== \"interval\") {                                            // 208\n                throw Error(\"Invlid measure provided: \" + this.measure);                                         // 209\n            }                                                                                                    // 210\n                                                                                                                 // 211\n            // Create the rule                                                                                   // 212\n            if (ruleType === \"interval\") {                                                                       // 213\n                if ( !this.start ) {                                                                             // 214\n                    throw Error(\"Must have a start date set to set an interval!\");                               // 215\n                }                                                                                                // 216\n                                                                                                                 // 217\n                rule = Interval.create(this.units, this.measure);                                                // 218\n            }                                                                                                    // 219\n                                                                                                                 // 220\n            if (ruleType === \"calendar\") {                                                                       // 221\n                rule = Calendar.create(this.units, this.measure);                                                // 222\n            }                                                                                                    // 223\n                                                                                                                 // 224\n            // Remove the temporary rule data                                                                    // 225\n            this.units = null;                                                                                   // 226\n            this.measure = null;                                                                                 // 227\n                                                                                                                 // 228\n            // Remove existing rule based on measure                                                             // 229\n            for (var i = 0; i < this.rules.length; i++) {                                                        // 230\n                if (this.rules[i].measure === rule.measure) {                                                    // 231\n                    this.rules.splice(i, 1);                                                                     // 232\n                }                                                                                                // 233\n            }                                                                                                    // 234\n                                                                                                                 // 235\n            this.rules.push(rule);                                                                               // 236\n            return this;                                                                                         // 237\n        }                                                                                                        // 238\n                                                                                                                 // 239\n        // Private method to get next, previous or all occurances                                                // 240\n        function getOccurances(num, format, type) {                                                              // 241\n            var currentDate, date;                                                                               // 242\n            var dates = [];                                                                                      // 243\n                                                                                                                 // 244\n            if (!(this instanceof Recur)) {                                                                      // 245\n                throw Error(\"Private method trigger() was called directly or not called as instance of Recur!\"); // 246\n            }                                                                                                    // 247\n                                                                                                                 // 248\n            if ( !this.start && !this.from ) {                                                                   // 249\n                throw Error(\"Cannot get occurances without start or from date.\");                                // 250\n            }                                                                                                    // 251\n                                                                                                                 // 252\n            if ( type === \"all\" && !this.end ) {                                                                 // 253\n                throw Error(\"Cannot get all occurances without an end date.\");                                   // 254\n            }                                                                                                    // 255\n                                                                                                                 // 256\n            if( !!this.end && (this.start > this.end) ) {                                                        // 257\n                throw Error(\"Start date cannot be later than end date.\");                                        // 258\n            }                                                                                                    // 259\n                                                                                                                 // 260\n            // Return empty set if the caller doesn't want any for next/prev                                     // 261\n            if(type !== \"all\" && !(num > 0)) {                                                                   // 262\n                return dates;                                                                                    // 263\n            }                                                                                                    // 264\n                                                                                                                 // 265\n            // Start from the from date, or the start date if from is not set.                                   // 266\n            currentDate = (this.from || this.start).clone();                                                     // 267\n                                                                                                                 // 268\n            // Include the initial date to the results if wanting all dates                                      // 269\n            if(type === \"all\") {                                                                                 // 270\n                if (this.matches(currentDate, false)) {                                                          // 271\n                    date = format ? currentDate.format(format) : currentDate.clone();                            // 272\n                    dates.push(date);                                                                            // 273\n                }                                                                                                // 274\n            }                                                                                                    // 275\n                                                                                                                 // 276\n            // Get the next N dates, if num is null then infinite                                                // 277\n            while(dates.length < (num===null ? dates.length+1 : num)) {                                          // 278\n                if (type === \"next\" || type === \"all\") {                                                         // 279\n                    currentDate.add(1, \"day\");                                                                   // 280\n                }                                                                                                // 281\n                else {                                                                                           // 282\n                    currentDate.subtract(1, \"day\");                                                              // 283\n                }                                                                                                // 284\n                                                                                                                 // 285\n                //console.log(\"Match: \" + currentDate.format(\"L\") + \" - \" + this.matches(currentDate, true));    // 286\n                                                                                                                 // 287\n                // Don't match outside the date if generating all dates within start/end                         // 288\n                if (this.matches(currentDate, (type===\"all\"?false:true))) {                                      // 289\n                    date = format ? currentDate.format(format) : currentDate.clone();                            // 290\n                    dates.push(date);                                                                            // 291\n                }                                                                                                // 292\n                if(type === \"all\" && currentDate >= this.end) {                                                  // 293\n                    break;                                                                                       // 294\n                }                                                                                                // 295\n            }                                                                                                    // 296\n                                                                                                                 // 297\n            return dates;                                                                                        // 298\n        }                                                                                                        // 299\n                                                                                                                 // 300\n                                                                                                                 // 301\n        ///////////////////////                                                                                  // 302\n        // Private Functions //                                                                                  // 303\n        ///////////////////////                                                                                  // 304\n                                                                                                                 // 305\n        // Private function to see if a date is within range of start/end                                        // 306\n        function inRange(start, end, date) {                                                                     // 307\n            if (start && date.isBefore(start)) { return false; }                                                 // 308\n            if (end && date.isAfter(end)) { return false; }                                                      // 309\n            return true;                                                                                         // 310\n        }                                                                                                        // 311\n                                                                                                                 // 312\n        // Private function to turn units into objects                                                           // 313\n        function unitsToObject(units) {                                                                          // 314\n            var list = {};                                                                                       // 315\n                                                                                                                 // 316\n            if ( Object.prototype.toString.call(units) == '[object Array]' ) {                                   // 317\n                units.forEach(function(v) {                                                                      // 318\n                    list[v] = true;                                                                              // 319\n                });                                                                                              // 320\n            }                                                                                                    // 321\n            else if ( units === Object(units) ) {                                                                // 322\n                list = units;                                                                                    // 323\n            }                                                                                                    // 324\n            else if ( (Object.prototype.toString.call(units) == '[object Number]') || (Object.prototype.toString.call(units) == '[object String]') ) {\n                list[units] = true;                                                                              // 326\n            }                                                                                                    // 327\n            else {                                                                                               // 328\n                throw Error(\"Provide an array, object, string or number when passing units!\");                   // 329\n            }                                                                                                    // 330\n                                                                                                                 // 331\n            return list;                                                                                         // 332\n        }                                                                                                        // 333\n                                                                                                                 // 334\n        // Private function to check if a date is an exception                                                   // 335\n        function isException(exceptions, date) {                                                                 // 336\n            for (var i = 0, len = exceptions.length; i < len; i++ ) {                                            // 337\n                if (moment(exceptions[i]).isSame(date)) {                                                        // 338\n                    return true;                                                                                 // 339\n                }                                                                                                // 340\n            }                                                                                                    // 341\n                                                                                                                 // 342\n            return false;                                                                                        // 343\n        }                                                                                                        // 344\n                                                                                                                 // 345\n        // Private function to pluralize measure names for use with dictionaries.                                // 346\n        function pluralize(measure) {                                                                            // 347\n            switch(measure) {                                                                                    // 348\n                case \"day\":                                                                                      // 349\n                    return \"days\";                                                                               // 350\n                                                                                                                 // 351\n                case \"week\":                                                                                     // 352\n                    return \"weeks\";                                                                              // 353\n                                                                                                                 // 354\n                case \"month\":                                                                                    // 355\n                    return \"months\";                                                                             // 356\n                                                                                                                 // 357\n                case \"year\":                                                                                     // 358\n                    return \"years\";                                                                              // 359\n                                                                                                                 // 360\n                case \"dayOfWeek\":                                                                                // 361\n                    return \"daysOfWeek\";                                                                         // 362\n                                                                                                                 // 363\n                case \"dayOfMonth\":                                                                               // 364\n                    return \"daysOfMonth\";                                                                        // 365\n                                                                                                                 // 366\n                case \"weekOfMonth\":                                                                              // 367\n                    return \"weeksOfMonth\";                                                                       // 368\n                                                                                                                 // 369\n                case \"weekOfYear\":                                                                               // 370\n                    return \"weeksOfYear\";                                                                        // 371\n                                                                                                                 // 372\n                case \"monthOfYear\":                                                                              // 373\n                    return \"monthsOfYear\";                                                                       // 374\n                                                                                                                 // 375\n                default:                                                                                         // 376\n                    return measure;                                                                              // 377\n            }                                                                                                    // 378\n        }                                                                                                        // 379\n                                                                                                                 // 380\n        // Private funtion to see if all rules matche                                                            // 381\n        function matchAllRules(rules, date, start) {                                                             // 382\n            var i, len, rule, type;                                                                              // 383\n                                                                                                                 // 384\n            for ( i = 0, len = rules.length; i < len; i++ ) {                                                    // 385\n                rule = rules[i];                                                                                 // 386\n                type = ruleTypes[rule.measure];                                                                  // 387\n                                                                                                                 // 388\n                if (type === \"interval\") {                                                                       // 389\n                    if ( !Interval.match(rule.measure, rule.units, start, date) ) {                              // 390\n                        return false;                                                                            // 391\n                    }                                                                                            // 392\n                }                                                                                                // 393\n                else if (type === \"calendar\") {                                                                  // 394\n                    if ( !Calendar.match(rule.measure, rule.units, date) ) {                                     // 395\n                        return false;                                                                            // 396\n                    }                                                                                            // 397\n                }                                                                                                // 398\n                else {                                                                                           // 399\n                    return false;                                                                                // 400\n                }                                                                                                // 401\n            }                                                                                                    // 402\n                                                                                                                 // 403\n            return true;                                                                                         // 404\n        }                                                                                                        // 405\n                                                                                                                 // 406\n        // Private function to create measure functions                                                          // 407\n        function createMeasure(measure) {                                                                        // 408\n            return function(units) {                                                                             // 409\n                this.every.call(this, units, measure);                                                           // 410\n                return this;                                                                                     // 411\n            };                                                                                                   // 412\n        }                                                                                                        // 413\n                                                                                                                 // 414\n                                                                                                                 // 415\n        //////////////////////                                                                                   // 416\n        // Public Functions //                                                                                   // 417\n        //////////////////////                                                                                   // 418\n                                                                                                                 // 419\n        // Recur Object Constrcutor                                                                              // 420\n        var Recur = function(options) {                                                                          // 421\n            if ( options.start ) {                                                                               // 422\n                this.start = moment(options.start).dateOnly();                                                   // 423\n            }                                                                                                    // 424\n                                                                                                                 // 425\n            if ( options.end ) {                                                                                 // 426\n                this.end = moment(options.end).dateOnly();                                                       // 427\n            }                                                                                                    // 428\n                                                                                                                 // 429\n            // Our list of rules, all of which must match                                                        // 430\n            this.rules = options.rules || [];                                                                    // 431\n                                                                                                                 // 432\n            // Our list of exceptions. Match always fails on these dates.                                        // 433\n            this.exceptions = options.exceptions || [];                                                          // 434\n                                                                                                                 // 435\n            // Temporary units integer, array, or object. Does not get imported/exported.                        // 436\n            this.units = null;                                                                                   // 437\n                                                                                                                 // 438\n            // Tempoarary measure type. Does not get imported/exported.                                          // 439\n            this.measure = null;                                                                                 // 440\n                                                                                                                 // 441\n            // Tempoarary from date for next/previous. Does not get imported/exported.                           // 442\n            this.from = null;                                                                                    // 443\n                                                                                                                 // 444\n            return this;                                                                                         // 445\n        };                                                                                                       // 446\n                                                                                                                 // 447\n        // Get/Set start date                                                                                    // 448\n        Recur.prototype.startDate = function(date) {                                                             // 449\n            if (date === null) {                                                                                 // 450\n                this.start = null;                                                                               // 451\n                return this;                                                                                     // 452\n            }                                                                                                    // 453\n                                                                                                                 // 454\n            if (date) {                                                                                          // 455\n                this.start = moment(date).dateOnly();                                                            // 456\n                return this;                                                                                     // 457\n            }                                                                                                    // 458\n                                                                                                                 // 459\n            return this.start;                                                                                   // 460\n        };                                                                                                       // 461\n                                                                                                                 // 462\n        // Get/Set end date                                                                                      // 463\n        Recur.prototype.endDate = function(date) {                                                               // 464\n            if (date === null) {                                                                                 // 465\n                this.end = null;                                                                                 // 466\n                return this;                                                                                     // 467\n            }                                                                                                    // 468\n                                                                                                                 // 469\n            if (date) {                                                                                          // 470\n                this.end = moment(date).dateOnly();                                                              // 471\n                return this;                                                                                     // 472\n            }                                                                                                    // 473\n                                                                                                                 // 474\n            return this.end;                                                                                     // 475\n        };                                                                                                       // 476\n                                                                                                                 // 477\n        // Get/Set a temporary from date                                                                         // 478\n        Recur.prototype.fromDate = function(date) {                                                              // 479\n             if (date === null) {                                                                                // 480\n                this.from = null;                                                                                // 481\n                return this;                                                                                     // 482\n            }                                                                                                    // 483\n                                                                                                                 // 484\n            if (date) {                                                                                          // 485\n                this.from = moment(date).dateOnly();                                                             // 486\n                return this;                                                                                     // 487\n            }                                                                                                    // 488\n                                                                                                                 // 489\n            return this.from;                                                                                    // 490\n        };                                                                                                       // 491\n                                                                                                                 // 492\n        // Export the settings, rules, and exceptions of this recurring date                                     // 493\n        Recur.prototype.save = function() {                                                                      // 494\n            var data = {};                                                                                       // 495\n                                                                                                                 // 496\n            if (this.start && moment(this.start).isValid()) {                                                    // 497\n                data.start = this.start.format(\"L\");                                                             // 498\n            }                                                                                                    // 499\n                                                                                                                 // 500\n            if (this.end && moment(this.end).isValid()) {                                                        // 501\n                data.end = this.end.format(\"L\");                                                                 // 502\n            }                                                                                                    // 503\n                                                                                                                 // 504\n            data.exceptions = [];                                                                                // 505\n            for (var i = 0, len = this.exceptions.length; i < len; i++) {                                        // 506\n                data.exceptions.push(this.exceptions[i].format(\"L\"));                                            // 507\n            }                                                                                                    // 508\n                                                                                                                 // 509\n            data.rules = this.rules;                                                                             // 510\n                                                                                                                 // 511\n            return data;                                                                                         // 512\n        };                                                                                                       // 513\n                                                                                                                 // 514\n        // Return boolean value based on whether this date repeats (has rules or not)                            // 515\n        Recur.prototype.repeats = function() {                                                                   // 516\n            if (this.rules.length > 0) {                                                                         // 517\n                return true;                                                                                     // 518\n            }                                                                                                    // 519\n                                                                                                                 // 520\n            return false;                                                                                        // 521\n        };                                                                                                       // 522\n                                                                                                                 // 523\n        // Set the units and, optionally, the measure                                                            // 524\n        Recur.prototype.every = function(units, measure) {                                                       // 525\n                                                                                                                 // 526\n            if ((typeof units !== \"undefined\") && (units !== null)) {                                            // 527\n                this.units = unitsToObject(units);                                                               // 528\n            }                                                                                                    // 529\n                                                                                                                 // 530\n            if ((typeof measure !== \"undefined\") && (measure !== null)) {                                        // 531\n                this.measure = pluralize(measure);                                                               // 532\n            }                                                                                                    // 533\n                                                                                                                 // 534\n            return trigger.call(this);                                                                           // 535\n        };                                                                                                       // 536\n                                                                                                                 // 537\n        // Creates an exception date to prevent matches, even if rules match                                     // 538\n        Recur.prototype.except = function(date) {                                                                // 539\n            date = moment(date).dateOnly();                                                                      // 540\n            this.exceptions.push(date);                                                                          // 541\n            return this;                                                                                         // 542\n        };                                                                                                       // 543\n                                                                                                                 // 544\n        // Forgets rules (by passing measure) and exceptions (by passing date)                                   // 545\n        Recur.prototype.forget = function(dateOrRule) {                                                          // 546\n            var i, len;                                                                                          // 547\n            var whatMoment = moment(dateOrRule);                                                                 // 548\n                                                                                                                 // 549\n            // If valid date, try to remove it from exceptions                                                   // 550\n            if (whatMoment.isValid()) {                                                                          // 551\n                for (i = 0, len = this.exceptions.length; i < len; i++) {                                        // 552\n                    if (whatMoment.isSame(this.exceptions[i])) {                                                 // 553\n                        this.exceptions.splice(i, 1);                                                            // 554\n                        return this;                                                                             // 555\n                    }                                                                                            // 556\n                }                                                                                                // 557\n                                                                                                                 // 558\n                return this;                                                                                     // 559\n            }                                                                                                    // 560\n                                                                                                                 // 561\n            // Otherwise, try to remove it from the rules                                                        // 562\n            for (i = 0, len = this.rules.length; i < len; i++) {                                                 // 563\n                if (this.rules[i].measure === pluralize(dateOrRule)) {                                           // 564\n                    this.rules.splice(i, 1);                                                                     // 565\n                }                                                                                                // 566\n            }                                                                                                    // 567\n        };                                                                                                       // 568\n                                                                                                                 // 569\n        // Attempts to match a date to the rules                                                                 // 570\n        Recur.prototype.matches = function(dateToMatch, ignoreStartEnd) {                                        // 571\n            var date = moment(dateToMatch).dateOnly();                                                           // 572\n                                                                                                                 // 573\n            if (!date.isValid()) {                                                                               // 574\n                throw Error(\"Invalid date supplied to match method: \" + dateToMatch);                            // 575\n            }                                                                                                    // 576\n                                                                                                                 // 577\n            if (!ignoreStartEnd && !inRange(this.start, this.end, date)) { return false }                        // 578\n                                                                                                                 // 579\n            if (isException(this.exceptions, date)) { return false; }                                            // 580\n                                                                                                                 // 581\n            if (!matchAllRules(this.rules, date, this.start)) { return false; }                                  // 582\n                                                                                                                 // 583\n            // if we passed everything above, then this date matches                                             // 584\n            return true;                                                                                         // 585\n        };                                                                                                       // 586\n                                                                                                                 // 587\n        // Get next N occurances                                                                                 // 588\n        Recur.prototype.next = function(num, format) {                                                           // 589\n            return getOccurances.call(this, num, format, \"next\");                                                // 590\n        };                                                                                                       // 591\n                                                                                                                 // 592\n        // Get previous N occurances                                                                             // 593\n        Recur.prototype.previous = function(num, format) {                                                       // 594\n            return getOccurances.call(this, num, format, \"previous\");                                            // 595\n        };                                                                                                       // 596\n                                                                                                                 // 597\n        // Get all occurances between start and end date                                                         // 598\n        Recur.prototype.all = function(format) {                                                                 // 599\n            return getOccurances.call(this, null, format, \"all\");                                                // 600\n        };                                                                                                       // 601\n                                                                                                                 // 602\n        // Create the measure functions (days(), months(), daysOfMonth(), monthsOfYear(), etc.)                  // 603\n        for (var measure in measures) {                                                                          // 604\n            if (ruleTypes.hasOwnProperty(measure)) {                                                             // 605\n                Recur.prototype[measure] = Recur.prototype[measures[measure]] = createMeasure(measure);          // 606\n            }                                                                                                    // 607\n        }                                                                                                        // 608\n                                                                                                                 // 609\n        return Recur;                                                                                            // 610\n    }());                                                                                                        // 611\n                                                                                                                 // 612\n    // Recur can be created the following ways:                                                                  // 613\n    // moment.recur()                                                                                            // 614\n    // moment.recur(options)                                                                                     // 615\n    // moment.recur(start)                                                                                       // 616\n    // moment.recur(start, end)                                                                                  // 617\n    moment.recur = function(start, end) {                                                                        // 618\n        // If we have an object, use it as a set of options                                                      // 619\n        if ( start === Object(start) && !moment.isMoment(start)) {                                               // 620\n            return new Recur( start );                                                                           // 621\n        }                                                                                                        // 622\n                                                                                                                 // 623\n        // else, use the values passed                                                                           // 624\n        return new Recur({ start: start, end: end });                                                            // 625\n    };                                                                                                           // 626\n                                                                                                                 // 627\n    // Recur can also be created the following ways:                                                             // 628\n    // moment().recur()                                                                                          // 629\n    // moment().recur(options)                                                                                   // 630\n    // moment().recur(start, end)                                                                                // 631\n    // moment(start).recur(end)                                                                                  // 632\n    // moment().recur(end)                                                                                       // 633\n    moment.fn.recur = function(start, end) {                                                                     // 634\n        // If we have an object, use it as a set of options                                                      // 635\n        if ( start === Object(start) && !moment.isMoment(start)) {                                               // 636\n            // if we have no start date, use the moment                                                          // 637\n            if ( typeof start.start === 'undefined' ) {                                                          // 638\n                start.start = this;                                                                              // 639\n            }                                                                                                    // 640\n                                                                                                                 // 641\n            return new Recur( start );                                                                           // 642\n        }                                                                                                        // 643\n                                                                                                                 // 644\n        // if there is no end value, use the start value as the end                                              // 645\n        if ( !end ) {                                                                                            // 646\n            end = start;                                                                                         // 647\n            start = undefined;                                                                                   // 648\n        }                                                                                                        // 649\n                                                                                                                 // 650\n        // use the moment for the start value                                                                    // 651\n        if (!start) {                                                                                            // 652\n            start = this;                                                                                        // 653\n        }                                                                                                        // 654\n                                                                                                                 // 655\n        return new Recur({ start: start, end: end, moment: this });                                              // 656\n    };                                                                                                           // 657\n                                                                                                                 // 658\n    // Plugin for calculating the week of the month of a date                                                    // 659\n    moment.fn.monthWeek = function() {                                                                           // 660\n        // First day of the first week of the month                                                              // 661\n        var week0 = this.clone().startOf(\"month\").startOf(\"week\");                                               // 662\n                                                                                                                 // 663\n        // First day of week                                                                                     // 664\n        var day0 = this.clone().startOf(\"week\");                                                                 // 665\n                                                                                                                 // 666\n        return day0.diff(week0, \"weeks\");                                                                        // 667\n    };                                                                                                           // 668\n                                                                                                                 // 669\n    // Plugin for removing all time information from a given date                                                // 670\n    moment.fn.dateOnly = function() {                                                                            // 671\n        return this.hours(0).minutes(0).seconds(0).milliseconds(0);                                              // 672\n    };                                                                                                           // 673\n                                                                                                                 // 674\n                                                                                                                 // 675\n    return moment;                                                                                               // 676\n}));                                                                                                             // 677\n                                                                                                                 // 678\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n"]}